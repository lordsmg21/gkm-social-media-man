version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gkm-postgres
    environment:
      POSTGRES_DB: gkm_portal
      POSTGRES_USER: gkm_user
      POSTGRES_PASSWORD: gkm_secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gkm_user -d gkm_portal"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gkm-network

  # Redis for session management (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: gkm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gkm-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: gkm-backend
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=gkm_portal
      - DB_USER=gkm_user
      - DB_PASS=gkm_secure_password
      - JWT_SECRET=your-super-secure-jwt-secret-key-change-in-production-please
      - JWT_EXPIRES_IN=24h
      - PORT=5000
      - MAX_FILE_SIZE=209715200
      - UPLOAD_DIR=uploads
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gkm-network

  # Frontend (Production build)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: gkm-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gkm-network

  # Nginx Reverse Proxy (Optional, for production)
  nginx:
    image: nginx:alpine
    container_name: gkm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - gkm-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  gkm-network:
    driver: bridge